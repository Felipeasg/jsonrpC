{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Jsonrpc","body":"jsonrpC\r\n=======\r\n\r\njsonrpC is an implementation of [JSON RPC 2.0](http://www.jsonrpc.org/specification) protocol in C.\r\n* Simple API\r\n* Portable\r\n * The implementation is ANSI C.\r\n * JSON library can be easily ported. (e.g. [yajl](http://lloyd.github.com/yajl), [jansson](http://www.digip.org/jansson/))\r\n * Transport independent. You can use this library with UDS, WebSocket, ...\r\n* Tiny\r\n\r\njsonrpC is licensed under the [MIT License](http://www.opensource.org/licenses/mit-license.php)\r\n\r\n##Example\r\n####Register Method\r\n```C\r\njsonrpc_server_t * init_jsonrpc(void)\r\n{\r\n  jsonrpc_server_t *server;\r\n\tjsonrpc_error_t   error;\r\n\t\r\n\tserver = jsonrpc_server_open(jsonrpc_plugin_yajl());\r\n\t\r\n\terror  = jsonrpc_server_register_method(server, JSONRPC_TRUE, subtract, \"subtract\", \"minuend:i, subtrahend:i\");\r\n\terror  = jsonrpc_server_register_method(server, JSONRPC_TRUE, sum, \"sum\", \"iii\");\r\n  // add more method here\r\n  return server;\r\n}\r\n```\r\n####Execute request\r\n```C\r\nvoid execute_jsonrpc(jsonrpc_server_t *server)\r\n{\r\n  const char       *req, *res;\r\n\t\r\n\treq = \"{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"subtract\\\", \\\"params\\\": {\\\"subtrahend\\\": 23, \\\"minuend\\\": 42}, \\\"id\\\": 3}\";\r\n\tres = jsonrpc_server_execute(server, req);\r\n\t// use 'res'\r\n}\r\n```\r\n####Example code (screenshot)\r\nrun server\r\n```shell\r\n$make\r\n$./jsonrpc\r\n```\r\nopen test_websocket.html (with WebSocket supported browser)\r\n![screenshot](http://farm9.staticflickr.com/8454/8062570242_1aea4d2602.jpg)\r\n\r\n##ToDo\r\n* build with autotools or CMake\r\n* jsonrpC client library\r\n* jansson json plugin\r\n\r\n","tagline":"JSON RPC C Implementation"}