{"body":"jsonrpC\r\n=======\r\n\r\n[jsonrpC](http://jhlee4bb.github.com/jsonrpC) is an implementation of [JSON RPC 2.0](http://www.jsonrpc.org/specification) protocol in C.\r\n* Simple API\r\n* Portable\r\n * ANSI C.\r\n * JSON library can be easily ported. (e.g. [yajl](http://lloyd.github.com/yajl), [jansson](http://www.digip.org/jansson/))\r\n * Transport independent. Use this library with UDS, WebSocket, ...\r\n* Tiny\r\n\r\njsonrpC is licensed under the [MIT License](http://www.opensource.org/licenses/mit-license.php)\r\n\r\n##Compilation\r\n```\r\n$mkdir build\r\n$cd build\r\n$cmake ..\r\n$make\r\nbuild output left in jsonrpc-x.y\r\n```\r\n\r\n##Example\r\n####Server\r\ntest_websocket.c\r\n```C\r\njsonrpc_error_t subtract (int argc, const jsonrpc_param_t *argv, void (* print_result)(void *ctx, const char *fmt, ...), void *ctx)\r\n{\r\n\tprint_result(ctx, \"%lf\", \r\n\t\targv[0].json.u.number - argv[1].json.u.number\r\n\t);\r\n\treturn JSONRPC_ERROR_OK;\r\n}\r\n\r\nint main (int argc, const char * argv[])\r\n{\r\n\tjsonrpc_server_t *server;\r\n\tjsonrpc_error_t   error;\r\n\t\r\n\tserver = jsonrpc_server_open(\r\n\t\t\t\t/* json_plugin: yajl       */jsonrpc_plugin_yajl(), \r\n\t\t\t\t/*  net_plugin: websockets */jsonrpc_plugin_websockets_server(), \r\n\t\t\t\t/* port */8212\r\n\t\t\t);\r\n\terror  = jsonrpc_server_register_method(server, JSONRPC_TRUE, subtract, \"subtract\", \"minuend:i, subtrahend:i\");\r\n\t// add more method here..\r\n\r\n\tfor (;;)\r\n\t{\r\n\t\terror = jsonrpc_server_run(server, 50);\r\n\t\tif (error != JSONRPC_ERROR_OK && error != JSONRPC_ERROR_SERVER_TIMEOUT)\r\n\t\t\tbreak;\r\n\t}\r\n\tjsonrpc_server_close(server);\r\n\treturn 0;\r\n}\r\n```\r\n\r\n####Client\r\ntest_websocket.html\r\n```javascript\r\nvar ws;\r\n\r\nfunction init()\r\n{\r\n\tws = new WebSocket(\"ws://localhost:8212\", \"jsonrpc-server-websocket\");\r\n\tws.onopen = function(e) {\r\n\t\twriteLog('WebSocket: CONNECTED');\r\n\t};\r\n\tws.onclose = function(e) {\r\n\t\twriteLog('WebSocket: DISCONNECTED');\r\n\t};\r\n\tws.onmessage = function(e) {\r\n\t\twriteLog('<-- ' + e.data);\r\n\t};\r\n\tws.onerror = function(e) {\r\n\t\twriteLog('WebSocket: ERROR(' + e.data + ')');\r\n\t};\r\n}\r\nfunction request()\r\n{\r\n\tvar json=document.getElementById(\"pre_code\").value;\r\n\t\r\n\twriteLog('--> ' + json)\r\n\tws.send(json);\r\n}\r\nfunction writeLog(text)\r\n{\r\n\tdocument.getElementById(\"pre_output\").value += text + '\\n';\r\n}\r\n```\r\n####Screenshot\r\nopen test_websocket.html (with WebSocket supported browser)\r\n![screenshot](http://farm9.staticflickr.com/8454/8062570242_1aea4d2602.jpg)\r\n","google":"","tagline":"JSON RPC C Implementation","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Jsonrpc"}